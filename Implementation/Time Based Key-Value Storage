class Item {                //Each value/timestamp item
    String val;
    int time;
    public Item(String val, int time) {
        this.val = val;
        this.time = time;
    }
}

class TimeMap {
    
    private HashMap<String, ArrayList<Item>> timeMap;       //Using an arraylist takes less memory, and can be used for bin search
    
    public TimeMap() {
         timeMap = new HashMap<>();
    }
    
    public void set(String key, String value, int timestamp) {  
        Item temp = new Item(value, timestamp);
        if(!timeMap.containsKey(key))               //Add an arraylist if it is a new item
            timeMap.put(key, new ArrayList<>());
        timeMap.get(key).add(temp);
    }
    
    public String get(String key, int timestamp) {
        ArrayList<Item> cur = timeMap.get(key);
        if(cur == null)                         //If there are no values
            return "";
        int lo = 0;
        int hi = cur.size()-1;
        while(lo+1< hi) {                       //Binary search
            int mid = lo + (hi - lo) /2;
            if(cur.get(mid).time == timestamp) return cur.get(mid).val;
            else if(cur.get(mid).time > timestamp) hi = mid;
            else lo = mid;
        }
        if(cur.get(hi).time <= timestamp) return cur.get(hi).val;           //Last two pointers, check right first since it is higher in time than left
        else if(cur.get(lo).time <= timestamp) return cur.get(lo).val;      
        return "";  
    }
}
