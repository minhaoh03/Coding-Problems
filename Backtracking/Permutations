class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> re = new ArrayList();       //returning arraylist
        helper(nums, re, new ArrayList<>());        //call recursive backtrack
        return re;
    }
    
    private void helper(int[] nums, List<List<Integer>> re, List<Integer> cur) {
        if(cur.size() == nums.length) {         //current list is full
            re.add(new ArrayList<>(cur));   //add the current list to final list of lists
            return;
        }
        for(int i = 0; i < nums.length; ++i) {
            if(cur.contains(nums[i])) continue;   //check duplicate, if it is, skip current element
            cur.add(nums[i]);           //add the number to the cur list
            helper(nums, re, cur);      //recursive call for next element for the cur list
            cur.remove(cur.size()-1);   //remove the last inputted element so that it can be replaced in next loop
        }
    }
}
