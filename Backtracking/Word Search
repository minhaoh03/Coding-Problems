class Solution {
    public boolean exist(char[][] board, String word) {
        char[] wordChar = word.toCharArray();           //faster access of the characters instead of creating new strings
        for(int c = 0; c < board.length; ++c) {
            for(int r = 0; r < board[0].length; ++r) {
                if(board[c][r] == wordChar[0] && dfs(board, wordChar, r, c, 0)) return true;        //first statement to prevent useless calls to method
            }
        }
        return false;
    }
    
    public boolean dfs(char[][] board, char[] wordChar, int r, int c, int i) {
        if(i == wordChar.length)
            return true;
        if(r < 0 || c < 0 || r >= board[0].length || c >= board.length || board[c][r] != wordChar[i]) 
            return false;   
        board[c][r] ^= 256;                 //XOR op, can be used to change the current char to mark as visited
        if (dfs(board, wordChar, r+1, c, i+1) || dfs(board, wordChar, r-1, c, i+1) || dfs(board, wordChar, r, c+1, i+1) || dfs(board, wordChar, r, c-1, i+1)) return true;
        board[c][r] ^= 256;         //XOR twice changes it back, used for backtracking
        return false;
    }
}
