class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        ArrayList<TreeNode> pLCA = new ArrayList<>();           //Ancestors of p
        ArrayList<TreeNode> qLCA = new ArrayList<>();           //Ancestors of q
    
        TreeNode findQ = root;          //Finding q node
        TreeNode findP = root;          //Finding p node
    
        findNode(findP, p, pLCA);       //Recursion to find the nodes and add them to the ancestor list
        findNode(findQ, q, qLCA);
        
        for(int i = 0; i < pLCA.size(); ++i) {
            for(int j = 0; j < qLCA.size(); ++j) {  
                if(pLCA.get(i).equals(qLCA.get(j)))         //First node found and is the same between the two ancestor list is the lowest ancestor
                    return pLCA.get(i);
            }
        }
        return null;
    }
                
    public boolean findNode(TreeNode n, TreeNode find, ArrayList<TreeNode> hs) {
        if(n == null) 
            return false;
        else if(n.equals(find) || findNode(n.left, find, hs) || findNode(n.right, find, hs)) {      //REMEMBER to call the method within the if statement
            hs.add(n);                      //Only add the nodes that are within the ancestry line of the goal node
            return true;
        }
        return false;
    }
}
