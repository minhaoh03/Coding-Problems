class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int pL = 0, iL = pL, pR = preorder.length-1, iR = pR;           //pL and pR is preorder lefts and rights, iL and iR is inorder lefts and rights
        Map<Integer, Integer> hm = new HashMap();                       //to store the inorder values for faster access later
        for(int i = 0; i < iR+1; ++i) 
            hm.put(inorder[i], i);
        
        return buildRe(preorder, inorder, pL, pR, iL, iR, hm);
    }
    
    public TreeNode buildRe(int[] preorder, int[] inorder, int pL, int pR, int iL, int iR, Map<Integer, Integer> hm) {
        if(pL > pR || iL > iR) return null; 
        TreeNode root = new TreeNode(preorder[pL]);                 //current root
        int newiL = hm.get(root.val);                               //the new iL is where inorder keeps the preorder root value
        
        root.left = buildRe(preorder, inorder, pL+1, pR, iL, newiL-1, hm);      //move the left preorder bound up by 1, the new upper bound for inorder is updated since all left nodes will be between iL and where the root is to the left
        root.right = buildRe(preorder, inorder, pL + newiL - iL + 1, pR, newiL+1, iR, hm);  //move the left preorder bound by counting nodes skipped, which is exactly what the inorder array tells once you find the difference between the newiL and previous iL plus one, resulting in the first right node
        return root;
    }
}
