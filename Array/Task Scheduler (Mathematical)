//O(n) time O(1) memory solution
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] chars = new int[26];
        int max = 0;                                        //largest amount of same task count
        int maxes = 0;                                      //multiple largest amount of same task count
        
        for(int i = 0; i < tasks.length; ++i) {
            int index = tasks[i]-'A';
            chars[index]++;
            if(max == chars[index]) {
                maxes++;
            }
            else if(max < chars[index]) {
                max = chars[index];
                maxes = 1;
            }
        }
        
        int parts = max - 1;                                //how many total "parts" for the tasks
        int partLength = n - (maxes - 1);                       //how long the "part" length is (without the max tasks)
        int emptySlots = parts * partLength;                    //the empty amount of slots in total (without any tasks)
        int totalTasks = tasks.length - max * maxes;            //total tasks not including the max task
        int idles = Math.max(0, emptySlots - totalTasks);       //amount of idles within the program
        return idles + tasks.length;                        //total time needed
    }
}
