//intuitive solution (not effective)
class Solution {
    public int leastInterval(char[] tasks, int n) {
        Map<Character, Integer> keys = new HashMap();
        
        for(int i = 0; i < tasks.length; ++i) {
            if(!keys.containsKey(tasks[i])) 
                keys.put(tasks[i], 1);
            else { 
                keys.put(tasks[i], keys.get(tasks[i])+1); 
            }
        }
        
        PriorityQueue<Integer> pq = new PriorityQueue(Collections.reverseOrder());      //prio q for all the numbers/characters
        for(Character c : keys.keySet()) 
            pq.offer(keys.get(c));
        

        int time = 0;
        Map<Integer, Integer> cooldown = new HashMap();                     //cooldown uses time as key and tasks left as value
        
        //whole idea of the while loop is to keep adding and going thru each of the tasks while being interchanged from cooldown and the queue until all are done.
        while(!pq.isEmpty() || cooldown.size() != 0) {
            if(cooldown.containsKey(time - n - 1))
                pq.offer(cooldown.remove(time - n - 1));
            if(!pq.isEmpty()) {
                int curTask = pq.poll()-1;
                if(curTask != 0) 
                    cooldown.put(time, curTask);
            }
            time++;
        }
        
        return time;
    }
}
