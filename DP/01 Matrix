class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int longest = mat.length + mat[0].length-2; //longest route possible
        
        for(int i = 0; i < mat.length; ++i) {
            for(int j = 0; j < mat[0].length; ++j) {
                if(mat[i][j] == 0) continue;            //if tile is 0, it stays 0
                else {   
                    int up = longest, left = longest;       //set both up and left to the longest first, for the 0,0 tile
                    if(i-1 >= 0) up = mat[i-1][j];          //if there is an upper tile, set that as up
                    if(j-1 >= 0) left = mat[i][j-1];        //^ but left
                    mat[i][j] = Math.min(up, left)+1;       //minimum distance between the upper and left + 1 since its a new tile
                }
            }
        }
        
        for(int i = mat.length-1; i >= 0; --i) {                //same process for the above, this is to ensure that we are checking all tiles that top to left may miss
            for(int j = mat[0].length-1; j >= 0; --j) {
                if(mat[i][j] == 0) continue;
                else { 
                    int down = longest, right = longest;
                    if(i+1 <= mat.length-1) down = mat[i+1][j];
                    if(j+1 <= mat[0].length-1) right = mat[i][j+1];
                    mat[i][j] = Math.min(mat[i][j], Math.min(down, right)+1);       //remember to also check between the current minimum given by topdown leftright iteration
                }    
            }
        }
        
        return mat;
    }
}
