class Solution {
    public String longestPalindrome(String s) {
        int maxString_l = 0, maxString_r = 1;
        
        for(int i = 0; i < s.length(); ++i) {           //iterate through the entire string's characters
            int r = i;                                      
            while(r < s.length() && s.charAt(i) == s.charAt(r))     //keep moving right pointer to the right as long as the current char is equal to it 
                r++;
            int l = i - 1;      
            while(l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) { //keep moving left pointer to the left as long as the right and left char are the same
                ++r;
                --l;
            }
            
            //previous two while loops basically find the palindrome
            if(r-l-1 > maxString_r-maxString_l) {           //if the current palindrome is longer than max, replace
                maxString_r = r;
                maxString_l = l+1;
            }
        }
        
        return s.substring(maxString_l, maxString_r);
    }
}
