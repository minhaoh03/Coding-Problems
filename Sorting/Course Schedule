class Solution {
    public boolean canFinish(int numCourses, int[][] pre) {     
        if(pre.length == 0)                                     //empty list is always true
            return true;
        int[] indegree = new int[numCourses];               //indegree list
        
        for(int r = 0; r < pre.length; ++r) {
            indegree[pre[r][0]]++;                          //add indegree for every prereq for a course
        }

        Queue<Integer> q = new LinkedList();            //bfs
        for(int i = 0; i < indegree.length; ++i) {      //for loop to find the course with no prereq/indegree IF THERE ISNT ANY, there is a loop
            if(indegree[i] == 0) {
                q.offer(i);
            }
        }
             
        while(!q.isEmpty()) {
            int cur = q.poll();                         //take out the current course
            for(int r = 0; r < pre.length; ++r) {
                if(pre[r][1] == cur) {                  //if the current course is a prereq for another course
                    if(--indegree[pre[r][0]] == 0) {    //subtract indegree from that other course, 
                        q.offer(pre[r][0]);             //if that course has no more prereq, add it to the queue
                    } 
                }
            }
        }
        
        for(int i = 0; i < indegree.length; ++i) {      //any courses that still have prereq/indegree shows a loop or inability to take all courses
            if(indegree[i] != 0)
                return false;
        }
        return true;
    }
}
