class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));      //Use lambda expression to sort the 2d array
        List<int[]> re = new ArrayList<>();
        for(int i = 0; i < intervals.length; ++i) {
            if(!re.isEmpty() && intervals[i][0] <= re.get(re.size()-1)[1]) {//Edit the last inserted array in re once meeting an intersection betweenintervals
                int[] temp = re.get(re.size()-1);                   //last inserted array
                temp[1] = Math.max(intervals[i][1], temp[1]);       //REMEMBER THAT ENDING VALUES CAN BE LOWER IN LATER ARRAYS THAN PREVIOUS, thats why use Math.max
                re.set(re.size()-1, temp);          //Reinsert the combined interval
            }   
            else
                re.add(intervals[i]);           //Otherwise insert the interval if its not intersecting
        }
        
        return re.toArray(new int[re.size()][]);    //Return the arraylist in array form
    }
}
